Entry 1 - 11/3/2016:
  I successfully executed a handshake between the C code on the arduino and the Java code on my computer.  Furthermore, I 
successfully sent/received information from both Java and the arduino.  Also, I used this connection to call two different if 
statements requiring input from serial.  Please view VDS3_0/log/ReferenceImages/11.3.2016.png for reference.  Deadline for 
successful back and forth communication between Java program and Teensy 3.6 is 11/7/16.
  - Jacob Taylor Cassady

Entry 1 - 11/5/2016:
  Wrote additional serial write statements in order to ensure every message sent from Java is received by the Teensy 3.6.  Kenny 
Dang finished the wiring of the BNO055 and BMP180.  Plan for the rest of the day is to confirm a hello world between the Teensy 
and the two sensors.  Deadline for this bench mark is 11/10/16.
  - Jacob Taylor Cassady

Entry 1 - 11/8/2016:
  After some issues with the wiring of the BMP180, I have completed a "helloWorld" run with the pressure and acceleration 
sensors.  My next goal is to work on I/O using an SD card and my Java program as an output.  Additionally, my goal is to start 
developing the main C program to collect and report flight data.  I have been asked to put my GUI on hold but have began 
developing a rudimentary prototype at home.  My next deadline is 11/19/2016 when I have the following items due: help lydia with 
Kalman filter testing, convert velocity algorithm into C (complete), download sensor libraries (done), and create a reliable 
data I/O system using SD card (write function complete).
  - Jacob Taylor Cassady

Entry 1 - 11/9/2016:
  Updated Java Serial Listener to receive strings ending in ';'.  This allows the responses to come across as sentences of any 
length and output all words, characters, and punctuation at the same time.  ';' was chosen as the message tail at random and can 
easily be changed to more rare characters such as '|'.  Also, I have replaced 'A' in the handShake with '~' and also replaced 
the trash bytes with '~' as well to increase reliability of message delivery without limiting the program of likely chars such 
as 'A'.
  - Jacob Taylor Cassady

Entry 2 - 11/9/2016:
  Finished basic struture of program.  See VDS3_0 in the C code's file.  I still need to write the getAcceleration function 
using the same structure and math from VDS2_0.  Also, I am waiting on Ben Stringer (team lead and co-captian) to develop a 
request method for our BMP180 sensor. Furthermore, I am excited for Denny Joy to finish the List.c (single linked list) program 
and translate it into a header file to greatly increase the effeciency of the program.
  - Jacob Taylor Cassady

Entry 1 - 11/10/2016:
  Ben Stringer added awesome headings to each section of our main program VDS3_0.c.  I began work on a new program called 
IOTest.c today to test and stress functions which will retrieve and display data received from different tests and launches and 
write data to an SD  card.  Also, I continued to polish and make additions to VDS3_0.c.  I was unable to determine the 
chipselect pin on the teensy and will have to consult with Kenny Dang, an Electrical Engineer, this afternoon before I can 
continue on IO.
  - Jacob Taylor Cassady
  
Entry 2 - 11/10/2016:
  After talking with Denny, we have decided to scrap the linked list idea and instead replace the arrays from our program with a 
binary tree which uses what would be array positions as a key.  To accomplish this, I have thought of an algorithm which will 
produce the most efficient binary tree possible.  The algorithm, uses the difference between the max and current or current and 
middle if looking for the right child and the difference between 0 and current or middle and current if looking for the left 
child.  Then, you divide that ifference in half and take the floor/ceiling of the given value depending on which side of the 
node you are on.  For instance, when finding the right child of node 7 with a capacity of 14, you'd take half of 14-7 = 7.  Then 
divide 7/2=3.5  and find the ceiling of 3.5 which equals 4.  Therefore the right node of 7 should be 11.  Denny Joy is using my 
binary search tree program written in cpp to develop a c header file to use in our program in place of the altitude, 
acceleration, and time arrays.
  - Jacob Taylor Cassady

Entry 1 - 11/12/2016:
  Successfully read from and wrote to micro SD card on Teensy 3.6.  This took several days to successfully accomplish as I 
wasted a lot of time attempting the reach the micro SD card through a chip select and SPI. I later found the best way to contact 
the SD card is through a library called SdFat.  Furthermore, it is important to note the SdFat class does not work with the 
Teensy 3.6.  The only class I could get to work was SdFatStio.  The next step for me to work on is reading past flight data from 
an SD card into our flight mode loop in order to simulate the Kalman Filter and other program functions.
  - Jacob Taylor Cassady

Entry 1 - 11/14/2016:
  Completed File IO functions which draw test data from a CVS file.  Also updated writeToFile() function as well as updated 
VDS3_0.c with the tested functions from IOTest.c.  Ben said he will get me usable data for a test run by the weekend.  This test 
will allow us to test our Velocity function and kalman filter. Denny noted that he will not have the Binary Tree header done in 
time as he has been busy with the team website.  Next goal is to continue to shape VDS3_0.c and to write the getAcceleration 
function.  Also it might be a good idea to rewrite the functions which update acceleration, altitude, and time values to accept 
parameters instead of using global variables.
  - Jacob Taylor Cassady

Entry 1 - 11/15/2016:
  Updated File IO Functions and variables to coincide with Ben's recent changes to program struture.  Instead of using arrays to 
store values for the time being we will be using structures.  Additionally, since the BNO055 is over twice as fast as the BMP180 
at retrieving data, we will be holding off on replacing altitude values in the structure until the BMP180 is ready.  This might 
cause our data to somewhat present itself in a stepwise fashion and we will be testing the severity of this during our December 
subscale launch. My next step is to work on the getAcceleration function.
  - Jacob Taylor Cassady

Entry 1 - 11/18/2016:
  Created a new unit test for vertical acceleration values.  The proof and explanation of the math being done in the 
getAcceleration() function can be seen in the ReferenceImages folder and is titled AccelerationProof.jpg.  Furthermore, I 
completed the calibrateBNO() function.  These two functions were tested before hand.  This test can be seen in the Tests folder 
and is titled BNOTest.c.
  - Jacob Taylor Cassady
  
Entry 1 - 11/22/2016:
  The VDS team worked hard before Thanksgiving Break.  We almost completed a simulation run of our code pulling expected sensor
data from text files with past fight values.  At first, our flight data output from the simulation included egregious values 
for velocity and zero values for all kalman data.  After finding some errors in the implementation of the velocity algorithm
as well as errors in the equation itself, we came close to receiving expected values when  passed through the equation.  This
weekend, Ben Stringer confirmed the left side of the equation.  There still are some issues with specific value cases as noted 
in the VelocityEquation.jpg image included in the ReferenceImages file.
  - Jacob Taylor Cassady
